Prerequisites:

Ubuntu: You should have a clean installation of Ubuntu on the machines where you plan to set up your Kubernetes cluster.

Minimum 2 Nodes: For a basic Kubernetes cluster, you need at least two nodes - one for the master and one or more for worker nodes.

Network Configuration: Ensure that your nodes can communicate with each other over the network. You should have a static IP address for each node.

Root Privileges: You need to run some commands with root privileges, so make sure you have sudo access.

step 1: Update and install required packages
sudo apt update
sudo apt install -y docker.io
sudo systemctl enable docker
sudo systemctl start docker

step 2: Install kubernetes tools
sudo apt install -y curl apt-transport-https
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt update
sudo apt install -y kubelet kubeadm kubectl

step 3: Initialize the Kubernetes Master Node
On your master node, initialize the Kubernetes cluster using kubeadm. Replace MASTER_IP with the actual private IP address of your master node.
sudo kubeadm init --pod-network-cidr=192.168.0.0/16 --apiserver-advertise-address=MASTER_IP
After the initialization is complete, you will see a message with a kubeadm join command to add worker nodes to the cluster. Make sure to save this command for later use.

step4: Set Up Kubectl for Your User
Run these commands on your master node to configure kubectl for your user:
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config


step5: Join Worker Nodes
On each worker node, run the kubeadm join command you saved from Step 4. It should look something like this:

sudo kubeadm join MASTER_IP:6443 --token TOKEN --discovery-token-ca-cert-hash SHA256_HASH

step6: Choose a network plugin for your cluster. In this example, we'll use Calico:
url https://raw.githubusercontent.com/projectcalico/calico/v3.29.2/manifests/calico.yaml -O

kubectl apply -f calico.yaml

watch kubectl get nodes

run command to check calico pods are running it will take some time to come up 5-7 mins: kubectl get pods -n kube-system

[root@ip-172-31-20-103 ec2-user]# kubectl get pods -n kube-system
NAME                                                    READY   STATUS             RESTARTS         AGE
calico-kube-controllers-77969b7d87-z7g5g                0/1     CrashLoopBackOff   3 (29s ago)      7m25s
calico-node-pjs9s                                       0/1     Running            1 (21s ago)      7m25s
calico-node-qthsw                                       0/1     Running            0                7m25s
calico-node-vvh2h                                       0/1     Running            1 (24s ago)      7m25s
coredns-668d6bf9bc-88bnr                                1/1     Running            0                42m
coredns-668d6bf9bc-dh4sd                                1/1     Running            1 (40s ago)      42m
etcd-ip-172-31-20-103.ec2.internal                      1/1     Running            22 (102s ago)    36m
kube-apiserver-ip-172-31-20-103.ec2.internal            1/1     Running            21 (3m15s ago)   42m
kube-controller-manager-ip-172-31-20-103.ec2.internal   0/1     CrashLoopBackOff   22 (3s ago)      33m
kube-proxy-p8bgf                                        1/1     Running            20 (92s ago)     42m
kube-proxy-shn9d                                        0/1     CrashLoopBackOff   6 (3m40s ago)    18m
kube-proxy-wf62f                                        0/1     CrashLoopBackOff   6 (4m27s ago)    18m
kube-scheduler-ip-172-31-20-103.ec2.internal            1/1     Running            21 (87s ago)     41m


step7: Step 8: Verify Cluster

Back on the master node, you can check the status of your cluster:
kubectl get nodes

You should see all nodes in the "Ready" state.

Congratulations! You've successfully installed Kubernetes on Ubuntu from scratch. You can now deploy and manage containers using Kubernetes.
